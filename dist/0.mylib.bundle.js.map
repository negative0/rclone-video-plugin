{"version":3,"sources":["webpack:///webpack/universalModuleDefinition","webpack:///./src/containers/MainPage.js","webpack:///./src/App.js","webpack:///./src/serviceWorker.js","webpack:///./src/index.js"],"names":["root","factory","exports","module","define","amd","a","i","window","MainPage","props","state","loadUrl","mimeType","url_string","location","href","url","URL","this","setState","searchParams","get","console","log","options","poster","sources","type","src","subtitles","defaultSubtitle","loadeddata","canplay","canplaythrough","play","pause","waiting","playing","ended","error","React","Component","App","className","Boolean","hostname","match","VideoPlayer","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"CAAA,SAA2CA,EAAMC,GAChD,GAAsB,kBAAZC,SAA0C,kBAAXC,OACxCA,OAAOD,QAAUD,SACb,GAAqB,oBAAXG,QAAyBA,OAAOC,IAC9CD,OAAO,GAAIH,OACP,CACJ,IAAIK,EAAIL,IACR,IAAI,IAAIM,KAAKD,GAAuB,kBAAZJ,QAAuBA,QAAUF,GAAMO,GAAKD,EAAEC,IAPxE,CASGC,QAAQ,WACX,O,kVCyEeC,E,kDAlEd,WAAYC,GAAQ,IAAD,8BAClB,cAAMA,IACDC,MAAQ,CACZC,QAAS,GACTC,SAAU,IAJO,E,gEAZE,IAAD,OACfC,EAAaN,OAAOO,SAASC,KAC7BC,EAAM,IAAIC,IAAIJ,GAClBK,KAAKC,SAAS,CACbR,QAASK,EAAII,aAAaC,IAAI,WAC9BT,SAAUI,EAAII,aAAaC,IAAI,cAC9B,WACDC,QAAQC,IAAI,EAAKb,c,kDAclBY,QAAQC,IAAI,gB,gCAGZD,QAAQC,IAAI,a,uCAGZD,QAAQC,IAAI,oB,6BAGZD,QAAQC,IAAI,U,8BAGZD,QAAQC,IAAI,W,gCAGZD,QAAQC,IAAI,a,gCAGZD,QAAQC,IAAI,a,8BAGZD,QAAQC,IAAI,W,8BAGZD,QAAQC,IAAI,W,+BAGF,IAAD,EAEmBL,KAAKR,MAA1BC,EAFE,EAEFA,QAASC,EAFP,EAEOA,SAEhB,GAAGD,GAAWC,EAAU,CACvB,IAAMY,EAAU,CACfC,OAAQ,4DACRC,QAAS,CAAC,CACTC,KAAMf,EACNgB,IAAKjB,IAENkB,UAAW,GACXC,gBAAiB,MAElB,OAAO,kBAAC,IAAD,CACNN,QAASA,EACTO,WAAYb,KAAKa,WACjBC,QAASd,KAAKc,QACdC,eAAgBf,KAAKe,eACrBC,KAAMhB,KAAKgB,KACXC,MAAOjB,KAAKiB,MACZC,QAASlB,KAAKkB,QACdC,QAASnB,KAAKmB,QACdC,MAAOpB,KAAKoB,MACZC,MAAOrB,KAAKqB,QAGd,OAAO,S,GA7EcC,IAAMC,WCSdC,MARf,WACE,OACI,yBAAKC,UAAU,OACb,kBAAC,EAAD,QCKYC,QACW,cAA7BrC,OAAOO,SAAS+B,UAEe,UAA7BtC,OAAOO,SAAS+B,UAEhBtC,OAAOO,SAAS+B,SAASC,MACvB,2DCPC,IAAMC,EAAc,CACvBL,ODuHE,kBAAmBM,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAf,GACLjB,QAAQiB,MAAMA,EAAMgB,c","file":"0.mylib.bundle.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse {\n\t\tvar a = factory();\n\t\tfor(var i in a) (typeof exports === 'object' ? exports : root)[i] = a[i];\n\t}\n})(window, function() {\nreturn ","import React from 'react';\nimport ReactAwesomePlayer from 'react-awesome-player'\n\nclass MainPage extends React.Component {\n\n\tcomponentDidMount() {\n\t\tlet url_string = window.location.href;\n\t\tlet url = new URL(url_string);\n\t\tthis.setState({\n\t\t\tloadUrl: url.searchParams.get(\"loadUrl\"),\n\t\t\tmimeType: url.searchParams.get(\"mimeType\")\n\t\t},()=>{\n\t\t\tconsole.log(this.state)\n\t\t} );\n\n\t}\n\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.state = {\n\t\t\tloadUrl: \"\",\n\t\t\tmimeType: \"\"\n\t\t}\n\t}\n\n\tloadeddata() {\n\t\tconsole.log('loadeddata')\n\t}\n\tcanplay() {\n\t\tconsole.log('canplay')\n\t}\n\tcanplaythrough() {\n\t\tconsole.log('canplaythrough')\n\t}\n\tplay() {\n\t\tconsole.log('play')\n\t}\n\tpause() {\n\t\tconsole.log('pause')\n\t}\n\twaiting() {\n\t\tconsole.log('waiting')\n\t}\n\tplaying() {\n\t\tconsole.log('playing')\n\t}\n\tended() {\n\t\tconsole.log('ended')\n\t}\n\terror() {\n\t\tconsole.log('error')\n\t}\n\n\trender () {\n\n\t\tconst {loadUrl, mimeType} = this.state;\n\t\t// console.log(loadUrl, mimeType);\n\t\tif(loadUrl && mimeType) {\n\t\t\tconst options = {\n\t\t\t\tposter: \"http://pic2.52pk.com/files/130514/1283314_143556_2145.jpg\",\n\t\t\t\tsources: [{\n\t\t\t\t\ttype: mimeType,\n\t\t\t\t\tsrc: loadUrl\n\t\t\t\t}],\n\t\t\t\tsubtitles: [],\n\t\t\t\tdefaultSubtitle: 'en'\n\t\t\t}\n\t\t\treturn <ReactAwesomePlayer\n\t\t\t\toptions={options}\n\t\t\t\tloadeddata={this.loadeddata}\n\t\t\t\tcanplay={this.canplay}\n\t\t\t\tcanplaythrough={this.canplaythrough}\n\t\t\t\tplay={this.play}\n\t\t\t\tpause={this.pause}\n\t\t\t\twaiting={this.waiting}\n\t\t\t\tplaying={this.playing}\n\t\t\t\tended={this.ended}\n\t\t\t\terror={this.error}\n\t\t\t/>\n\t\t}\n\t\treturn null;\n\t}\n}\nexport default MainPage;\n","import React from 'react';\nimport './App.css';\nimport MainPage from \"./containers/MainPage\";\n\nfunction App() {\n  return (\n      <div className=\"App\">\n        <MainPage/>\n      </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n// ReactDOM.render(\n//   <React.StrictMode>\n//     <App />\n//   </React.StrictMode>,\n//   document.getElementById('root')\n// );\nexport const VideoPlayer = {\n    App\n}\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}